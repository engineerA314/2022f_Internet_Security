인터넷 보안 과제 1 README 파일

컴퓨터공학부 2018-18574 박준영
이메일 : jyp0314@snu.ac.kr
전화번호 : 010-7709-2772

개발 환경
Ubuntu 20.04 LTS: gcc/g++ 9.3.0

사용한 라이브러리
#include <iostream>
#include <fstream>
#include <string>
#include <gmpxx.h>
#include <gmp.h>
#include <utility>

컴파일 명령어
g++ -o rsa rsa.cpp -lgmpxx -lgmp 

실행 방법
1. Keygen
명령어 : ./rsa -keygen
rsa 파일이 있는 폴더 안에 "primes.txt" 파일이 있어야 하고, 이 텍스트 파일에 한 줄에 하나씩 두개의 소수가 들어있어야 한다.
실행시 주어진 primes.txt 파일 안의 두 소수 p,q를 이용하여 n,e,d 를 생성한 뒤
"private.key.txt" 파일의 첫 줄에 private key d, 둘째 줄에 n을 입력해 저장하고,
"public.key.txt" 파일의 첫 줄에 public key e, 둘째 줄에 n을 입력해 저장한다.


2. Encrypt
명령어 : ./rsa -encrypt
rsa 파일이 잇는 폴더 안에 "plaintext.txt" 파일이 있어야 하고, 이 파일 안에 암호화할 plaintext가 들어있어야 한다.
또, "public.key.txt" 파일이 rsa 파일이 잇는 폴더 안에 있어야 하며, 이 파일의 첫 줄에는 public key e, 둘째 줄에는 n이 있어야 한다.

실행시 주어진 plaintext 를 public.key.txt 파일로 주어진 (n,e) 로 암호화해 만든 cyphertext 를 "cyphertext.txt" 파일의 첫 줄에 입력해 저장한다.

3. Decrypt
명령어 : ./rsa -decrypt
rsa 파일이 잇는 폴더 안에 "cyphertext.txt" 파일이 있어야 하고, 이 파일 안에 암호화할 cyphertext가 들어있어야 한다.
또, "private.key.txt" 파일이 rsa 파일이 잇는 폴더 안에 있어야 하며, 이 파일의 첫 줄에는 private key d, 둘째 줄에는 n이 있어야 한다.
또, rsa 파일이 있는 폴더 안에 "primes.txt" 파일이 있어야 하고, 이 텍스트 파일에 한 줄에 하나씩 두개의 소수가 들어있어야 한다.

실행시 주어진 cyphertext를 private.key.txt 파일로 주어진 private key d와 primes.txt에서 주어진 두 소수 p,q를 이용하여 복호화하고,
이 결과를 "plaintext.decrypt.txt" 파일에 저장한다.


테스트에 사용한 소수
p
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112069763

q
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112070191

테스트에 사용한 plaintext
201818574


예외처리한 작동
1) 필요로 하는 파일이 존재하지 않은 경우
2) 적절하지 않은 명령어를 주었을 경우
3) primes.txt에 있는 두 값이 소수가 아니거나, 두 값이 같을 경우
4) 암호화해야 하는 plaintext가 p*q = n 보다 큰 값일 경우

